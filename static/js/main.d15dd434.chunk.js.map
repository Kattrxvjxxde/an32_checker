{"version":3,"sources":["components/NumberField.tsx","components/ResultBox.tsx","components/Calculator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NumberField","props","label","name","value","handleChange","valueStr","String","TextField","type","inputProps","maxLength","pattern","onChange","InputLabelProps","shrink","FIGURE_HEIGHT","useStyles","makeStyles","flexBox","display","justifyContent","figureContainer","height","position","noteContainer","realNoteFigure1","margin","marginRight","width","borderBottom","zIndex","realNoteFigure2","marginLeft","borderTop","criticalFigure","top","left","transform","WebkitTransform","MsTransform","background","textAlign","animation","opacity","virtualNote","hr","resultContainer","marginTop","fontFamily","fontSize","ResultBox","classes","interval","criticalSec","noteFigureHeight","criticalFigureHeight","intervalStr","criticalSecStr","className","Box","sx","Calculator","React","useState","bpm","setBpm","noteType","setNoteType","onlyNumRegexp","event","test","target","numValue","Number","replace","calcInterval","useMemo","Math","round","calcCriticalSec","App","AppBar","Toolbar","Typography","Container","maxWidth","m","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d15dd434.chunk.js","sourcesContent":["import React from 'react';\nimport { TextField } from \"@material-ui/core\";\n\ntype NumberFieldProps = {\n  label: string;\n  name: string;\n  value: number;\n  handleChange: (event: React.ChangeEvent<{ value: unknown, name?: string }>) => void;\n};\n\nconst NumberField: React.FC<NumberFieldProps> = (props: NumberFieldProps) => {\n  const { label, name, value, handleChange } = props;\n  const valueStr = value === 0 ? '' : String(value);\n\n  return (\n    <TextField\n      label={label}\n      name={name}\n      type=\"number\"\n      inputProps={{ maxLength: 3, pattern: '[0-9]*' }}\n      value={valueStr}\n      onChange={handleChange}\n      InputLabelProps={{\n        shrink: true,\n      }}\n    />\n  );\n};\n\nexport default NumberField;\n","import React from 'react';\nimport {\n  makeStyles,\n  Box,\n} from \"@material-ui/core\";\n\nconst FIGURE_CONTAINTER_HEIGHT = 320;\nconst FIGURE_HEIGHT = 240;\nconst NOTE_WIDTH = 120;\n\nconst useStyles = makeStyles(() => ({\n  flexBox: {\n    display: 'flex',\n    justifyContent: 'space-evenly',\n  },\n  figureContainer: {\n    height: FIGURE_CONTAINTER_HEIGHT,\n    position: 'relative',\n  },\n  noteContainer: {\n    height: FIGURE_CONTAINTER_HEIGHT,\n    display: 'flex',\n  },\n  realNoteFigure1: {\n    margin: 'auto',\n    marginRight: 16,\n    width: NOTE_WIDTH,\n    borderBottom: '1rem solid #696969',\n    zIndex: 100,\n  },\n  realNoteFigure2: {\n    margin: 'auto',\n    marginLeft: 16,\n    width: NOTE_WIDTH,\n    borderTop: '1rem solid #696969',\n    zIndex: 100,\n  },\n  criticalFigure: {\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    WebkitTransform: 'translate(-50%, -50%)',\n    MsTransform: 'translate(-50%, -50%)',\n    width: '100%',\n    background: '#ffa050',\n    position: 'absolute',\n    textAlign: 'center',\n    animation: '$flash linear infinite 1s',\n  },\n  '@keyframes flash': {\n    '0%, 100%': { opacity: 0.7 },\n    '50%': { opacity: 0.4 },\n  },\n  virtualNote: {\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    WebkitTransform: 'translate(-50%, -50%)',\n    MsTransform: 'translate(-50%, -50%)',\n    width: '100%',\n\n  },\n  hr: {\n    margin: '32px 0',\n  },\n  resultContainer: {\n    textAlign: 'center',\n  },\n  label: {\n    marginTop: 40,\n    fontFamily: 'Impact',\n    fontSize: '1.4rem',\n    textAlign: 'center',\n  },\n}));\n\ntype ResultBoxProps = {\n  interval: number;\n  criticalSec: number;\n};\n\nconst ResultBox: React.FC<ResultBoxProps> = (props: ResultBoxProps) => {\n  const classes = useStyles();\n  const { interval, criticalSec } = props;\n\n  const noteFigureHeight =\n    interval > criticalSec\n      ? FIGURE_HEIGHT\n      : FIGURE_HEIGHT * interval / criticalSec;\n\n  const criticalFigureHeight =\n   criticalSec > interval\n      ? FIGURE_HEIGHT\n      : FIGURE_HEIGHT * criticalSec / interval;\n\n  const intervalStr = interval === 0 ? 'ERROR' : `${interval} ms`\n\n  let criticalSecStr = 'ERROR';\n  if (interval !== 0) {\n    criticalSecStr = criticalSec > 0 ? `${criticalSec} ms` : 'なし';\n  }\n\n  return (\n    <>\n      <p className={classes.label}>\n        【 Calculation result 】\n      </p>\n\n      <Box className={classes.resultContainer}>\n        <Box className={classes.flexBox}>\n          <div>\n            [ ノーツ間秒数 ]\n            <br />\n            {intervalStr}\n          </div>\n          <div>\n            [ CRITICAL範囲 ]\n            <br />\n            {criticalSecStr}\n          </div>\n        </Box>\n      </Box>\n\n      <hr className={classes.hr} />\n\n      <p className={classes.label}>\n        【 Image diagram 】\n      </p>\n\n      <Box className={classes.flexBox}>\n        <Box className={classes.figureContainer}>\n          <Box className={classes.noteContainer}>\n            <Box\n              className={classes.realNoteFigure1}\n              sx={{ height: noteFigureHeight }}\n            />\n            <Box\n              className={classes.realNoteFigure2}\n              sx={{ height: noteFigureHeight }}\n            />\n          </Box>\n          {criticalSec > 0 && (\n            <Box\n              className={classes.criticalFigure}\n              sx={{ height: criticalFigureHeight }}\n            />\n          )}\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default ResultBox;\n","import React from 'react';\nimport {\n  makeStyles,\n  Box,\n} from \"@material-ui/core\";\nimport NumberField from './NumberField';\nimport ResultBox from './ResultBox';\n\nconst useStyles = makeStyles(() => ({\n  flexBox: {\n    display: 'flex',\n    justifyContent: 'space-evenly',\n  },\n}));\n\nconst Calculator: React.FC = () => {\n  const classes = useStyles();\n\n  const [bpm, setBpm] = React.useState<number>(230);\n  const [noteType, setNoteType] = React.useState<number>(24);\n\n  const onlyNumRegexp = /^\\d*$/;\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown, name?: string }>) => {\n    if (!onlyNumRegexp.test(event.target.value as string)) return;\n\n    const numValue = Number((event.target.value as string).replace(/^0+/, ''));\n\n    switch(event.target.name) {\n      case 'bpm':\n        return setBpm(numValue);\n      case 'noteType':\n        return setNoteType(numValue);\n      default:\n        return;\n    }\n  };\n\n  const calcInterval = React.useMemo(() => {\n    return (bpm * noteType === 0) ? 0 : Math.round(240000000 / (bpm * noteType)) / 1000;\n  }, [bpm, noteType]\n  );\n\n  const calcCriticalSec = React.useMemo(() =>\n    Math.round((1000000 / 12) - (240000000 / (bpm * noteType))) / 1000,\n    [bpm, noteType]\n  );\n\n  return (\n    <>\n      <Box className={classes.flexBox}>\n        <NumberField\n          label=\"BPM\"\n          name=\"bpm\"\n          value={bpm}\n          handleChange={handleChange}\n        />\n        <NumberField\n          label=\"NOTE TYPE\"\n          name=\"noteType\"\n          value={noteType}\n          handleChange={handleChange}\n        />\n      </Box>\n\n      <ResultBox\n        interval={calcInterval}\n        criticalSec={calcCriticalSec}\n      />\n    </>\n  );\n};\n\nexport default Calculator;\n","import React from 'react';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Container,\n  Box,\n} from '@material-ui/core';\nimport Calculator from './components/Calculator';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <Typography>あんみつチェッカー</Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Container maxWidth=\"sm\">\n        <Box sx={{ m: '32px 0' }}>\n          <Calculator />\n        </Box>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}